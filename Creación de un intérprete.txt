30/12/2014  -- Por Tito Hinostroza

Se describe la implementación de un intérprete sencillo, trabajando en Lazarus 1.2.

Para implementar un inérprete sencillo se requieren mínimamente las siguientes unidades:

* SynFacilBasic.pas
* SynFacilHighlighter.pas
* XpresBas.pas
* XPresParser.pas

Si se van a mostrar mensajes de salida se puede incluir el formulario FormOut, o un formualrio parecido 
para mostrar los mensajes generados con las instrucción de salida como puts(). 

Si se va a usar un editor con SynEdit, para editar el lenguaje a interpretar, es recomendable usar la 
unidad SynFacilUtils, que es una librería que aliviará enórmemente, el trabajo de implementar un editor
con sintaxis coloreada y completado de código.

Para el intérprete, se debe escribir definir el lenguaje e implementar el código de interpretación.
Todo esto se debe definir en una nueva unidad. Se recomienda usar el nombre "Parser.pas". En esta unidad 
se debe incluir a la unidad "XpresParser". Opcionalmente, para no hacer el código y para modularizar 
mejor al intérprete, se puede incluir un archivo adicional {$I interprete.pas}

El archivo "Interprete.pas", debe seguir una plantilla. Se puede usar el ejemplo "Demo1" como punto de 
partida.

Básicamente lo que se hace es allí es agregar los operadores y operaciones del lenguaje.

Se deben implementar obligatoriamente:

procedure Cod_StartData;   //Codifica la parte inicial de declaración de variables estáticas
procedure Cod_StartProgram;  //Codifica la parte inicial del programa
procedure Cod_EndProgram;  //Codifica la parte inicial del programa
procedure expr_start; //Se ejecuta siempre al StartSyntax el procesamiento de una expresión
procedure expr_end(isParam: boolean); //Se ejecuta al final de una expresión, si es que no ha habido error.
procedure StartSyntax;  //Aquí se define al lenguaje.

Todo estas modificaciones se hacen en "Interprete.pas".

En algunos casos se tendrá que modificar "XPresParser.pas", pero no es recomendable modificar 
"XPresBas.pas".
